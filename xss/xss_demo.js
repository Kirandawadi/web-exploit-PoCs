// Associate a random string to each user session and revoking this string after their logout.
// Same user can have multiple sessions from different devices

const express = require('express')
const app = express()
const { createReadStream } = require('fs')
const cookieParser = require('cookie-parser')
var path = require('path');
const { randomBytes } = require('crypto');
const { POINT_CONVERSION_COMPRESSED } = require('constants');

const SECRET_TOKEN = 'sdfqiwuhjeilfudhqwme'  //anything random

app.use(express.static(path.join(__dirname, 'public')))
app.use(express.urlencoded({ extended: false }))  //gives the ability to use req.body
app.use(cookieParser(SECRET_TOKEN))  //gives us the ability to use req.cookies
app.set('view engine', 'pug')
app.set('views', path.join(__dirname, ''))

const USERS = {
    alice: 'password',
    bob: 'pass'
}

const BALANCES = {
    alice: 500, bob: 500
}

let SESSIONS = {}  // sessionId --> username

app.get('/', (req, res) => {
    const referrer = req.query.source
    const sessionId= req.cookies.sessionId
    const username = SESSIONS[sessionId]
    console.log(req.cookies)
    if (username) {
        res.render('dashboard', { title: 'Dashboard', username: username, balance: BALANCES[username] })
    } else {
        res.redirect(`/login${referrer?('?source='+referrer):''}`) 
        //This source parameter is vulnerable to XSS if not escaped properly in login.pug         
    }
})

app.get('/login', (req, res) => {
    const referrer = req.query.source
    if (SESSIONS[req.cookies.sessionId]) {
        res.redirect('/')
    } else {
        res.render('login', {referrer: referrer})   
    }
})

app.post('/login', (req, res) => {
    const username = req.body.username
    const password = USERS[username]

    if (req.body.password === password) {
        randomId = randomBytes(16).toString('base64')
        res.cookie('sessionId', randomId, {
            secure: false,
            sameSite: 'lax',
            httpOnly: true,
            maxAge: 30*24*60*60*1000 //30 days
        })
        //Remember to use expiry date otherwise the browser will remember the cookie only for a browsing session.
        SESSIONS[randomId] = username
            res.redirect('/')
    } else {
        res.redirect('/login')
    }
    console.log(SESSIONS)
})

app.get('/logout', (req, res) => {
    res.clearCookie('sessionId', {
        sameSite: 'lax',
        httpOnly: true,
        secure: true
    })
    delete SESSIONS[req.cookies.sessionId]
    res.redirect('/login')
    console.log(SESSIONS)
})

app.post('/transfer', (req, res) => {
    const sessionId= req.cookies.sessionId
    const from = SESSIONS[sessionId]
    const to = req.body.to
    const amount = Number(req.body.amount)
    BALANCES[from] -= amount
    BALANCES[to] += amount
    res.redirect('/')

})

app.listen(4000, () => {
    console.log('Listening on port 4000')
})